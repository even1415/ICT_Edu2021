1. 아래의 함수를 만들고, 해당 함수를 호출하여 확인 하시오.
함수이름: getGrade
매개변수: double type 1개
리턴타입: 수 우 미 양 가 중 하나의 char 타입

public static char getGrade(double score) {
	char grade = '무';
	
	if(score>=90)grade = '수';
	else if(score>=80) grade = '우';
	else if(score>=70) grade = '미';
	else if(score>=60) grade = '양';
	else grade = '가';

	return grade;
}


2.매개변수 하나를 받아 
원의 넓이를 리턴하는 함수를 작성하시오.
public static double circleArea(double num) {
	return num * num * Math.PI;
}


3.매개변수 두 개를 받아, 사각형의 넓이를 리턴하는 함수를 
작성하시오.
public static double square(double width, double height) {
	return width * height;
}


4.매개변수 1000을 넣으면 1부터 1000 까지의 합 리턴
public static int sumNumber(int num) {
	int sum = 0;
	int i = 0;
		
	while(i<=num) {
		sum += i;
		i++;
	}
	return sum;
}

※호출은 sumNumber(1000); 으로 호출


5.매개변수 int 로 3개 받아서 최대값 리턴
public static int maxNumber(int num1, int num2, int num3) {
	int max = 0;
		
	if(num1>num2) max = num1;
	else max = num2;
	if(max<num3) max = num3;
		
	return max;
}

6. 아래가 의도하지 않은 결과를 나타내는 이유를 설명하시오.
char ch = '가';
System.out.println(ch + '\n'); //44042 라는 int 정수값 출력됨

// 의도를 표현하기 위한 방법
System.out.println(ch + "\n"); //가 출력됨

 - '\n' 을 하게 되면 문자열이 아닌, char형 문자로 인식하기 때문에
+연산이 이어붙이기 작업이 아닌 합연산을 수행함.
즉, 아스키코드 값으로 각각 '가' 와 '\n'이 변환된 후 합연산이 수행된 결과로,
char형 변수 2개의 합연산으로서 int형으로 자동 형변환되어 44042가 출력되었음.
 - 만약 여기서 "\n" 으로 따옴표를 큰따옴표로 변경하게 되면,
더이상 char형 문자가 아닌 String형 문자열이 되기 때문에 +연산도 이어붙이기 작업이 수행되어
정상적으로 <가> 글자가 출력


7. 변수의 scope 는?
- 변수는 변수가 선언된 시점부터 그 중괄호 블럭 안에서 사용 가능하다.
- 클래스 밖에서 변수 선언은 불가능함
- 같은 영역 내에서 동일 이름의 변수 선언 불가


8. 펙토리얼을 구하는 재귀 함수를 만드시오.
public static int factorial(int n) {
	if(n==1) return 1;
	else return n * factorial(n-1);
}

9.아래를 함수로 만들어 찍으시오.
printStar(5)

    *
   ***
  *****
 *******
*********

public static void drawStar2(int num) {
	for (int i = 1; i <= num; i++) {
		for (int j = num; j >= i; j--) {
			System.out.print(" ");

		}
		for (int k = 1; k < (2 * i); k++) {
			System.out.print("*");
		}
		System.out.println();
	}
}


10.객체란 무엇인가? 예습
데이터와 데이터에 관련된 처리내용을 수행하는 메소드를 묶는 것


11. 아래를 함수로 만들어시오.
getCurrentPaper(126500)

출력:
오만원 : 2장	
만원:    2장
오천원 :1장
천원: 1
오백원: 1개
백원: 0개

public static void getCurrentPaper(int money) {
	System.out.println("오만원권 : " + (money/50000) + "장");
	System.out.println("만원권 : " + ((money%50000)/10000) + "장");
	System.out.println("오천원권 : " + ((money%10000)/5000) + "장");
	System.out.println("천원권 : " + ((money%5000)/1000) + "장");
	System.out.println("오백원 : " + ((money%1000)/500) + "개");
	System.out.println("백원 : " + ((money%500)/100) + "개");
}



12. 클래스명은 자유롭게 작성하시면 되고
다음과 같은 함수를 만들겁니다.

세 자리의 자연수를 곱하는 과정을 보여주는 함수 "myMultiply"

세 자리의 자연수의 곱은 다음과 같이 이루어집니다. 출력값은 계산과정들을 출력합니다.
     352
×  373
---------
   1056 ---일의자리 출력
  2464  ---십의자리 출력
1056   ---백의자리 출력
----------
131296 ---최종결과 출력


호출방식은 다음과 같습니다.
myMultiply(264,317);

실행결과는 다음과 같습니다.
1848
264
792
83688

프로젝트명 : 2021-09-09


13.아래의 함수를 만드시오.

파라미터로 1000을 넣으면 1부터 1000까지의
숫자중 5의 배수이자 7의 배수인 수의 갯수를 카운트 하여 리턴
public static int numberUp(int num) {
	for(int i=1; i<=num; i++) {
		if(i%5==0 && i%7==0) count++;
	}
	System.out.println("5,7의 공통배수의 갯수 : " + count);
	return count;
}


14.아래의 함수를 만드시오.

getGugudan(3) // 3단 출력
getGugudan(5) // 5단 출력
getGugudan(6) // 6단 출력
getGugudan(7) // 7단 출력

public static void getGugudan(int num) {
	for(int j=1; j<=9; j++) {
		System.out.println(num + " * " + j + " = " + num*j);
	}
}