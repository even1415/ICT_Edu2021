--DAY6_SELECT5

--직원정보에서 부서코드 50 혹은 NULL 직원 조회
--이름,급여 조회
--급여기준 내림차순 정렬, 같은 급여라면 이름기준 오름차순 정렬
SELECT EMP_NAME "이름", SALARY "급여"
FROM EMPLOYEE
WHERE DEPT_ID IS NULL OR DEPT_ID = '50'
ORDER BY SALARY DESC, EMP_NAME;

--2003년 1월 1일 이후 입사한 직원 조회
--이름, 입사일, 부서코드, 급여 / 별칭 처리
--부서코드 기준 내림차순 정렬, 같은 부서코드라면 입사일 기준 오름차순 정렬,
--같은 입사일이라면 이름 기준 오름차순 정렬
SELECT EMP_NAME "이름", HIRE_DATE "입사일", DEPT_ID "부서코드", SALARY "급여"
FROM EMPLOYEE
WHERE HIRE_DATE > = '2003/1/1'
--WHERE HIRE_DATE > TO_DATE('20030101', 'RRRRMMDD')
ORDER BY "부서코드" DESC NULLS LAST, "입사일", "이름";

--부서코드,직급코드 함께 그룹 묶고, 급여의 합계를 구함
--ROLLUP 사용, NULL 칸은 제외
SELECT DEPT_ID, JOB_ID, SUM(SALARY)
FROM EMPLOYEE
WHERE DEPT_ID IS NOT NULL AND JOB_ID IS NOT NULL
GROUP BY ROLLUP(DEPT_ID, JOB_ID);

SELECT *
FROM EMPLOYEE "E", DEPARTMENT "D"
WHERE E.DEPT_ID = D.DEPT_ID
ORDER BY EMP_ID ASC;

SELECT *
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID);

--사번,이름,직급명 조회
--오라클 전용
SELECT EMP_ID "사번", EMP_NAME "이름",  JOB_TITLE "직급명"
FROM EMPLOYEE "E", JOB "J"
WHERE E.JOB_ID = J.JOB_ID;


--ANSI 표준구문
SELECT EMP_ID "사번", EMP_NAME "이름",  JOB_TITLE "직급명"
FROM EMPLOYEE "E"
JOIN JOB USING (JOB_ID);

-- 1. 급여를 많이 받는 순으로 순위를 매긴다면...
SELECT EMP_NAME, SALARY, 
        RANK() OVER (ORDER BY SALARY DESC) 순위
FROM EMPLOYEE
ORDER BY 순위;


------------------------------------------연습문제
-- JOIN 연습문제

-- 1. 2020년 12월 25일이 무슨 요일인지 조회하시오.
SELECT TO_CHAR(TO_DATE('2020/12/25', 'RRRR/MM/DD'), 'DY') "요일"
FROM DUAL;


-- 2. 주민번호가 60년대 생이면서 성별이 여자이고, 
-- 성이 김씨인 직원들의 
-- 사원명, 주민번호, 부서명, 직급명을 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", EMP_NO "주민번호", DEPT_NAME "부서이름", JOB_TITLE "직급명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J"
WHERE  E.DEPT_ID = D.DEPT_ID AND E.JOB_ID = J.JOB_ID
AND
SUBSTR(EMP_NO, 1, 2)>='60' AND SUBSTR(EMP_NO, 1, 2)<'70'
AND SUBSTR(EMP_NO, 8, 1)='2' AND EMP_NAME LIKE '김%';

--ANSI VER.
SELECT EMP_NAME "사원명", EMP_NO "주민번호", DEPT_NAME "부서이름", JOB_TITLE "직급명"
FROM EMPLOYEE "E"
JOIN DEPARTMENT USING (DEPT_ID)
JOIN JOB USING (JOB_ID)
WHERE SUBSTR(EMP_NO, 1, 2)>='60' AND SUBSTR(EMP_NO, 1, 2)<'70'
AND SUBSTR(EMP_NO, 8, 1)='2' AND EMP_NAME LIKE '김%';


-- ★3. 가장 나이가 적은 직원의 
-- 사번, 사원명, 나이, 부서명, 직급명을 조회하시오.
--오라클 VER.
SELECT EMP_ID "사번", EMP_NAME "사원명", 
MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM'))) "나이",
DEPT_NAME "부서명", JOB_TITLE "직급명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J"
WHERE E.DEPT_ID = D.DEPT_ID(+) AND E.JOB_ID = J.JOB_ID(+)
GROUP BY EMP_ID, EMP_NAME, DEPT_NAME, JOB_TITLE
HAVING MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')))
 = (SELECT
MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')))
FROM EMPLOYEE
);

--ANSI VER.
SELECT EMP_ID "사번", EMP_NAME "사원명", 
MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM'))) "나이",
DEPT_NAME "부서명", JOB_TITLE "직급명"
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT USING (DEPT_ID)
RIGHT JOIN JOB USING (JOB_ID)
GROUP BY EMP_ID, EMP_NAME, DEPT_NAME, JOB_TITLE
HAVING MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')))
 = (SELECT
MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')))
FROM EMPLOYEE
);

--나이의 최소값 조회
SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM'))) "나이"
FROM EMPLOYEE;
-- 조회한 나이의 최소값을 이용해 직원의 정보 조회함
-- outer join 필요함.
SELECT EMP_ID "사번", EMP_NAME "사원명", 
EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')) "나이",
DEPT_NAME "부서명", JOB_TITLE "직급명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J"
WHERE E.DEPT_ID = D.DEPT_ID(+) AND E.JOB_ID = J.JOB_ID(+)
AND EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 4), 'RRMM')) = 32;



-- 4. 이름에 '성'자가 들어가는 직원들의 
-- 사번, 사원명, 부서명을 조회하시오.
--오라클 VER.
SELECT EMP_ID "사번", EMP_NAME "사원명", DEPT_NAME "부서명"
FROM EMPLOYEE "E", DEPARTMENT "D"
WHERE E.DEPT_ID = D.DEPT_ID
AND EMP_NAME LIKE '%성%';

--ANSI VER.
SELECT EMP_ID "사번", EMP_NAME "사원명", DEPT_NAME "부서명"
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID)
WHERE EMP_NAME LIKE '%성%';


-- 5. 해외영업팀에 근무하는 
-- 사원명, 직급명, 부서코드, 부서명을 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", E.DEPT_ID "부서코드", DEPT_NAME "부서명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J"
WHERE  E.DEPT_ID = D.DEPT_ID AND E.JOB_ID = J.JOB_ID
AND DEPT_NAME LIKE '해외영업%';

--ANSI VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", DEPT_ID "부서코드", DEPT_NAME "부서명"
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID)
JOIN JOB USING (JOB_ID)
WHERE DEPT_NAME LIKE '해외영업%';


-- 6. 보너스포인트를 받는 직원들의 
-- 사원명, 보너스포인트, 부서명, 근무지역명을 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", BONUS_PCT "보너스포인트", DEPT_NAME "부서명", LOC_DESCRIBE "근무지역명"
FROM EMPLOYEE "E", DEPARTMENT "D", LOCATION "L"
WHERE E.DEPT_ID = D.DEPT_ID AND D.LOC_ID = L.LOCATION_ID
AND BONUS_PCT > 0;

--ANSI VER.
SELECT EMP_NAME "사원명", BONUS_PCT "보너스포인트", DEPT_NAME "부서명", LOC_DESCRIBE "근무지역명"
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID)
JOIN LOCATION ON (LOC_ID = LOCATION_ID)
WHERE BONUS_PCT > 0;


-- 7. 부서코드가 20인 직원들의 
-- 사원명, 직급명, 부서명, 근무지역명을 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", DEPT_NAME "부서명", LOC_DESCRIBE "근무지역명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J", LOCATION "L"
WHERE E.DEPT_ID = D.DEPT_ID AND D.LOC_ID = L.LOCATION_ID AND E.JOB_ID = J.JOB_ID
AND E.DEPT_ID = 20;

--ANSI VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", DEPT_NAME "부서명", LOC_DESCRIBE "근무지역명"
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID)
JOIN JOB USING (JOB_ID)
JOIN LOCATION ON (LOC_ID = LOCATION_ID)
WHERE DEPT_ID = 20;


-- 8. 직급별 연봉의 최소급여(MIN_SAL)보다 많이 받는 직원들의
-- 사원명, 직급명, 급여, 연봉을 조회하시오.
-- 연봉은 보너스포인트를 적용하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", SALARY "급여", 
((SALARY + (SALARY * NVL(BONUS_PCT, 0))) * 12) "연봉"
FROM EMPLOYEE "E", JOB "J"
WHERE E.JOB_ID = J.JOB_ID
AND ((SALARY + (SALARY * NVL(BONUS_PCT, 0))) * 12) > MIN_SAL;

--ANSI VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", SALARY "급여", 
((SALARY + (SALARY * NVL(BONUS_PCT, 0))) * 12) "연봉"
FROM EMPLOYEE
JOIN JOB USING (JOB_ID)
WHERE ((SALARY + (SALARY * NVL(BONUS_PCT, 0))) * 12) > MIN_SAL;


-- 9 . 한국(KO)과 일본(JP)에 근무하는 직원들의 
-- 사원명(emp_name), 부서명(dept_name), 지역명(loc_describe),
--  국가명(country_name)을 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", DEPT_NAME "부서명", LOC_DESCRIBE "지역명", COUNTRY_NAME "국가명"
FROM EMPLOYEE "E", DEPARTMENT "D", JOB "J", LOCATION "L", COUNTRY "C"
WHERE E.DEPT_ID = D.DEPT_ID AND D.LOC_ID = L.LOCATION_ID AND E.JOB_ID = J.JOB_ID
AND L.COUNTRY_ID = C.COUNTRY_ID
AND C.COUNTRY_ID IN ('KO', 'JP');

--ANSI VER.
SELECT EMP_NAME "사원명", DEPT_NAME "부서명", LOC_DESCRIBE "지역명", COUNTRY_NAME "국가명"
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT_ID)
JOIN JOB USING (JOB_ID)
JOIN LOCATION ON (LOC_ID = LOCATION_ID)
JOIN COUNTRY USING (COUNTRY_ID)
WHERE COUNTRY_ID IN ('KO', 'JP');


-- 10. 같은 부서에 근무하는 직원들의 
-- 사원명, 부서코드, 동료이름, 부서코드를 조회하시오.
-- self join 사용
--오라클 VER.
SELECT E.EMP_NAME "사원명", E.DEPT_ID "부서코드", M.EMP_NAME "동료이름", M.DEPT_ID "동료 부서코드"
FROM EMPLOYEE "E", EMPLOYEE "M"
WHERE E.EMP_ID != M.EMP_ID AND E.DEPT_ID = M.DEPT_ID
ORDER BY E.EMP_NAME;

--ANSI VER.
SELECT E.EMP_NAME "사원명", E.DEPT_ID "부서코드",
M.EMP_NAME "동료이름", M.DEPT_ID "동료 부서코드"
FROM EMPLOYEE "E"
JOIN EMPLOYEE "M" ON (E.DEPT_ID = M.DEPT_ID)
WHERE E.EMP_ID != M.EMP_ID
ORDER BY E.EMP_NAME;


-- 11. 보너스포인트가 없는 직원들 중에서 
-- 직급코드가 J4와 J7인 직원들의 사원명, 직급명, 급여를 조회하시오.
--오라클 VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", SALARY "급여"
FROM EMPLOYEE "E", JOB "J"
WHERE E.JOB_ID = J.JOB_ID AND E.JOB_ID IN ('J4', 'J7')
AND BONUS_PCT IS NULL;

--ANSI VER.
SELECT EMP_NAME "사원명", JOB_TITLE "직급명", SALARY "급여"
FROM EMPLOYEE
JOIN JOB USING (JOB_ID)
WHERE JOB_ID IN ('J4', 'J7')
AND BONUS_PCT IS NULL;


-- 12. 소속부서가 50 또는 90인 직원중 
-- 기혼인 직원과 미혼인 직원의 수를 조회하시오.
--SELECT COUNT, COUNT(MARRIAGE = 'N')
SELECT DISTINCT 
(SELECT COUNT(*) FROM EMPLOYEE WHERE MARRIAGE = 'Y' AND DEPT_ID IN ('50', '90')) "기혼 직원 수",
(SELECT COUNT(*) FROM EMPLOYEE WHERE MARRIAGE = 'N' AND DEPT_ID IN ('50', '90')) "미혼 직원 수"
FROM EMPLOYEE;
