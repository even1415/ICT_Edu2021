-- DAY8_DDL&DML

-- DDL (Data Definition Language : 데이터 정의어)
-- 데이터베이스 객체를 생성/변경/제거에 사용되는 SQL 명령어 제공
-- 명령어 : CREATE(생성), ALTER(변경), DROP(제거)
-- 데이터베이스 객체 : 테이블(TABLE), 뷰(VIEW), 시퀀스(SEQUENCE), 인덱스(INDEX)

-- 테이블 만들기 : CREATE TABLE
/* 작성 형식 :
CREATE TABLE 테이블명(
        컬럼명 자료형(크기) [DEFAULT 컬럼에 사용할 기본값]
        컬럼명 자료형(크기) [제약조건종류]
        컬럼명 자료형(크기) [CONSTRAINT 이름 제약조건종류]
        컬럼명 자료형(크기) [DEFAULT 기본값 CONSTRAINT 이름 제약조건종류]
        컬럼명 자료형(크기) [CONSTRAINT 저장이름] 제약조건1 [CONSTRAINT 저장이름] 제약조건2,
        --컬럼 구성한 다음에 제약조건만 따로 지정가능 : 테이블 레벨
        제약조건종류(적용할 컬럼명),
        CONSTRAINT 저장할이름 제약조건종류 (적용할 컬럼명)
);
*/

CREATE TABLE TEST(); --ERROR : 컬럼이 없는 테이블은 생성불가

CREATE TABLE TEST(
        USERID VARCHAR2(20),
        USERPWD VARCHAR2(20),
        USERNAME VARCHAR2(30), --문자형은 크기 지정이 필수
        AGE NUMBER, --크기지정 생략가능(기본 7자리)
        ENROLL_DATE DATE --크기지정 없음
);

CREATE TABLE ORDERS (
        ORDERNO CHAR(4),
        CUSTNO CHAR(4),
        ORDERDATE DATE DEFAULT SYSDATE,
        SHIPDATE DATE,
        SHIPADDRESS VARCHAR2(40),
        QUANTITY NUMBER
);

-- 컬럼에 설명 달기 : COMMENT ON COLUMN 구문
-- COMMENT ON COLUMN 테이블명.컬럼명 IS '설명';
COMMENT ON COLUMN ORDERS.ORDERNO IS '주문번호';
COMMENT ON COLUMN ORDERS.CUSTNO IS '고객번호';
COMMENT ON COLUMN ORDERS.ORDERDATE IS '주문일자';
COMMENT ON COLUMN ORDERS.SHIPDATE IS '배송일자';
COMMENT ON COLUMN ORDERS.SHIPADDRESS IS '배송주소';
COMMENT ON COLUMN ORDERS.QUANTITY IS '주문수량';

-- *********************************************************************
-- 무결성 제약조건 (CONSTRAINTS)
-- 테이블에 데이터(값)가 기록(INSERT) OR 변경(UPDATE)될 때
-- 올바른 값이 기록되도록 검사하는 기능
-- 테이블의 저장된 데이터의 신뢰성을 높이기 위한 기술 : 데이터 무결성
-- 제약조건 종류 : NOT NULL, UNIQUE, PRIMARY KEY, CHECK, FOREIGN KEY
-- 이름으로 관리됨 : CONSTRAINT 저장할이름 제약조건종류 -- 컬럼레벨
-- 이름으로 관리됨 : CONSTRAINT 저장할이름 제약조건종류 (적용할 컬럼명) -- 테이블레벨
-- 이름 지정이 생략되면 자동으로 이름 지정 : SYS_C******** 형식
-- 테이블레벨에서, 여러개 컬럼 묶어서 하나의 제약조건을 지정가능(복합키)
-- CONSTRAINT 저장할이름 제약조건종류 (컬럼명, 컬럼명, ...) -- 테이블레벨에서만 가능

-- DML 명령어 : INSERT, UPDATE, DELETE

SELECT * FROM TEST;
SELECT COUNT(*) FROM TEST;

INSERT INTO TEST(USERID, USERPWD, USERNAME, AGE, ENROLL_DATE)
VALUES ('user007', 'pass007', '홍길동', 27, SYSDATE);

INSERT INTO TEST
VALUES ('user008', 'pass008', '김철수', 32, TO_DATE('20201225', 'RRRRMMDD'));

CREATE TABLE TESTNN (
        NNID NUMBER(5) NOT NULL, 
        NN_NAME VARCHAR2(2)
);

INSERT INTO TESTNN (NNID, NN_NAME)
VALUES (1, '오라클');

INSERT INTO TESTNN (NNID, NN_NAME)
VALUES (NULL, '자바'); --NOT NULL 제약조건 위배(에러)

INSERT INTO TESTNN (NN_NAME) --제외된 컬럼은 NULL이 됨
VALUES ('ORACLE'); --행 추가, NOT NULL 제약조건 위배(에러)

INSERT INTO TESTNN
VALUES (2, NULL); --행 추가

INSERT INTO TESTNN (NNID)
VALUES (3);

SELECT * FROM TESTNN;

CREATE TABLE TESTNN2 (
        NN_ID NUMBER(5),
        NN_NAME VARCHAR2(20),
        --테이블레벨
        CONSTRAINT NN_TN2_ID NOT NULL (NN_ID) --에러
        -- NOT NULL 은 테이블레벨에서 설정 불가
);

-- 해결
CREATE TABLE TESTNN2 (
        NN_ID NUMBER(5) CONSTRAINT NN_TN2_ID NOT NULL,
        NN_NAME VARCHAR2(20)
);

-- 제약조건 : UNIQUE ------------------------------------------------
CREATE TABLE TESTUN (
        UN_ID CHAR(3) UNIQUE,
        UN_NAME VARCHAR2(10) NOT NULL
);

INSERT INTO TESTUN VALUES ('AAA', '오라클');
INSERT INTO TESTUN VALUES ('AAA', '자바'); --에러
INSERT INTO TESTUN VALUES (NULL, '자바'); --에러

SELECT * FROM TESTUN;

--테이블레벨에서 설정
CREATE TABLE TESTUN2 (
        UN_ID CHAR(3),
        UN_NAME VARCHAR2(10) CONSTRAINT NN_TUN2_NAME NOT NULL,
        CONSTRAINT UN_TUN2_ID UNIQUE (UN_ID)
);

CREATE TABLE TESTUN3 (
        UN_ID CHAR(3),
        UN_NAME VARCHAR2(10) NOT NULL,
        UN_CODE CHAR(2),
        CONSTRAINT UN_TUN3_COMP UNIQUE (UN_ID, UN_NAME) --복합키
);

INSERT INTO TESTUN3 VALUES ('100', '오라클', '01');
INSERT INTO TESTUN3 VALUES ('200', '오라클', '01');
INSERT INTO TESTUN3 VALUES ('200', '오라클', '02'); --에러

INSERT INTO TESTUN3 VALUES (NULL, '오라클', '03');
INSERT INTO TESTUN3 VALUES ('200', NULL, '03') --에러(NOT NULL 제약조건 위배)

SELECT * FROM TESTUN3;

--제약조건 : PRIMARY KEY -----------------------------------

CREATE TABLE TESTPK (
    PID NUMBER PRIMARY KEY,
    PNAME VARCHAR2(15) NOT NULL,
    PDATE DATE
);

INSERT INTO TESTPK VALUES (1, '홍길동', '15/03/12');
INSERT INTO TESTPK VALUES (2, '김유신', TO_DATE('17/05/10'));
INSERT INTO TESTPK VALUES (NULL, '이순신', SYSDATE); --널 에러
INSERT INTO TESTPK VALUES (2, '이순신', SYSDATE); --중복에러


SELECT * FROM TESTPK;

CREATE TABLE TESTPK2 (
    PID NUMBER CONSTRAINT PK_TP2_ID PRIMARY KEY,
    PNAME VARCHAR2(15) PRIMARY KEY,
); --ERROR


CREATE TABLE TESTPK2 (
    PID NUMBER CONSTRAINT PK_TP2_ID PRIMARY KEY, --컬럼레벨
    PNAME VARCHAR2(15),
    PDATE DATE
);

CREATE TABLE TESTPK3 (
    PID NUMBER,
    PNAME VARCHAR2(15),
    PDATE DATE
    --테이블레벨
    CONSTRAINT PK_TPK3_ID PRIMARY KEY
);


CREATE TABLE TESTFK (
    EMP_ID CHAR(3) REFERENCES EMPLOYEE,
    DEPT_ID CHAR(2) CONSTRAINT FK_TFK_DID REFERENCES DEPARTMENT (DEPT_ID),
    JOB_ID CHAR(2),
    --테이블레벨
    CONSTRAINT FK_TFK_JID FOREIGN KEY(JOB_ID) REFERENCES JOB (JOB_ID)
);

INSERT INTO TESTFK VALUES ('100', '90', 'J4');
INSERT INTO TESTFK VALUES ('333', '90', 'J4'); --에러
INSERT INTO TESTFK VALUES ('210', '70', 'J4'); --에러

CREATE TABLE CONSTRAINT_EMP (
    EID CHAR(3) CONSTRAINT PKEID PRIMARY KEY,
    ENAME VARCHAR2(20) CONSTRAINT NENAME NOT NULL,
    ENO CHAR(14) CONSTRAINT NENO NOT NULL CONSTRAINT UENO UNIQUE,
    EMAIL VARCHAR2(25) CONSTRAINT UEMAIL UNIQUE,
    PHONE VARCHAR2(12),
    HIRE_DATE DATE DEFAULT SYSDATE,
    JID CHAR(2) CONSTRAINT FKJID REFERENCES JOB ON DELETE SET NULL,
    SALARY NUMBER,
    BONUS_PCT NUMBER,
    MARRIAGE CHAR(1) DEFAULT 'N' CONSTRAINT CHK CHECK (MARRIAGE IN ('Y', 'N')),
    MID CHAR(3) CONSTRAINT FKMID REFERENCES CONSTRAINT_EMP ON DELETE SET NULL,
    DID CHAR(2),
    CONSTRAINT FKDID FOREIGN KEY (DID) REFERENCES DEPARTMENT ON DELETE CASCADE
);

CREATE TABLE PRODUCT_STATE (
    PSTATE CHAR(1) PRIMARY KEY,
    PCOMMENT VARCHAR2(10)
);

INSERT INTO PRODUCT_STATE VALUES ('A', '최고급');
INSERT INTO PRODUCT_STATE VALUES ('B', '중급');
INSERT INTO PRODUCT_STATE VALUES ('C', '하급');

SELECT * FROM PRODUCT_STATE;

CREATE TABLE PRODUCT (
    PNAME VARCHAR2(20) PRIMARY KEY,
    PRICE NUMBER CHECK (PRICE > 0),
    PSTATE CHAR(1) REFERENCES PRODUCT_STATE ON DELETE SET NULL
);

INSERT INTO PRODUCT VALUES ('갤럭시노트', 1250000, 'A');
INSERT INTO PRODUCT VALUES ('G9', 650000, 'C');
INSERT INTO PRODUCT VALUES ('갤럭시S21', 1000000, 'B');

SELECT * FROM PRODUCT;

SELECT *
FROM PRODUCT
LEFT JOIN PRODUCT_STATE USING (PSTATE);

DELETE FROM PRODUCT_STATE
WHERE PSTATE = 'C';

SELECT * FROM PRODUCT_STATE;
SELECT * FROM PRODUCT;

ROLLBACK;

CREATE TABLE PRODUCT2 (
    PNAME VARCHAR2(20) PRIMARY KEY,
    PRICE NUMBER CHECK (PRICE > 0),
    PSTATE CHAR(1) REFERENCES PRODUCT_STATE ON DELETE CASCADE
);

INSERT INTO PRODUCT2 VALUES ('갤럭시노트', 1250000, 'A');
INSERT INTO PRODUCT2 VALUES ('G9', 650000, 'C');
INSERT INTO PRODUCT2 VALUES ('갤럭시S21', 1000000, 'B');

SELECT * FROM PRODUCT2;

DELETE FROM PRODUCT_STATE
WHERE PSTATE = 'A';

SELECT * FROM PRODUCT_STATE;
SELECT * FROM PRODUCT2;